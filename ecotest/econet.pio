;
; Copyright (c) 2021 Gordon Design Ltd
;
; SPDX-License-Identifier: BSD-3-Clause
;

;-----------------------------------------------------------------------
; General Design notes
;
; Using PIO unit.  There are two PIO units per chip, each with
; 4 state machines.

; Only 32 instructions in each unit, shared between the 4 state machines.
; Each state machine has input and output FIFOs, though these
; can be paired to give a double-length FIFO in one direction.
; Each state machine has separate GPIO pin mappings for each of
; the conditional jump, the IN/MOV instructions, the OUT/MOV instructions,
; the SET instruction, and side-setting attached to other instructions.
; WAIT instructions can either use the pin mapping from IN, or
; else use absolute pin numbers (ie. pin mapping bound in the code).
; 
; Sensible to use side-set for line driver enable.
; 
; It is possible to modify code on the fly (ie. from the ARM: the
; PIO code itself can't be self-modifying), but this would preclude
; running more than one state machine with the same code.
; It is also possible to force execution of individual instructions
; by writing them from the ARM (without ever lying in the program RAM):
; this is commonly done for initialisation - particularly PINDIRS -
; without wasting instruction memory for that, though it can also
; be done during execution to change control flow.
; 
; Receive program can't read directly from RxD with the IN
; instruction, as there's no way to test a bit once it's
; in the shift register, and no way to shift it back out
; if it turns out to be padding.  Instead, need conditional
; jump on the RxD value.
;
; Data is received LSB first, so ISR needs to shift right; if
; we use autopush (and have the FIFO as bytes) this means the byte will be 
; misaligned in the 32-bit words of the FIFO.  Using the FIFO as
; words would be too complex (given variable length packets), so
; we probably need to live with the unaligned data (ARM or DMA can
; read the FIFO with byte ops at a +3 address) unless we have
; code space to spare for manual shift and push. 
; We can load a 32-bit value into the FIFO explicitly and
; push it, so we do this for Flag to give a marker; unfortunately
; this means we need to do word-wide reads from the FIFO
; and shift the data down in the normal case.

; This code would fit easily as separate Tx and Rx state machines,
; but that would either mean using both PIO units (it would be nice
; to keep one for non-Econet functions, and also synchronising
; the two PIO units is not explicitly supported), or else using
; the CPU to replace the code in the PIO unit when flipping between
; Tx and Rx: this is feasible, but needs interrupt latency down
; to the order of one bit time where it's otherwise only a byte
; time or better.


;----------------------------------------------------------------------------
; Detailed notes on the current design
;
; Econet HDLC and line turnaround logic
;
; Normal entry is at rxentrypoint, which will Rx continuously,
; putting a special low-bits-set word in the RX FIFO when a flag is Rx
; and otherwise receiving all bytes; the transition to idle unavoidably
; writes a byte of 0xff to the FIFO before the idle is detected.
; (this spurious FF will then be followed by another idle marker so
; just looks like a runt packet that could happen any time).
; Another special marker value is written to the Rx FIFO from the Tx code
; when it starts emitting a flag - this is used to sequence events
; at the beginning and end of Tx.
;
; Tx code switches to generating flags if the output FIFO is empty: used
; both to get the trailing flag after a packet and to get the leading
; flag (by switching to Tx mode and only putting the first byte in the
; FIFO after it has started doing the first flag).  This also provides
; automatic generation of flag fill where a delay is needed before
; generating a response frame, eg. if implementing bridging functions
; or with RxCBs on a host via USB.
;
; For line turnaround (ie. to Tx a frame immediately having received
; a scout or Ack, where the responding flag must go out before the
; line becomes idle), the code is arranged so that the loop back
; to the main Rx code after a flag is received is made using the
; .wrap mechanism.  When a line turnaround is desired, the .wrap
; is disabled and control falls through from the flag Rx into the
; Tx flag code.  For the transition in the other direction, the
; .wrap is put back and at the point when the Tx code would be
; about to start generating another flag it wraps back into
; the Rx code.
;

; Forced entry at tx_zero_bit for ARM to force us from Rx into Tx
; on a line turnaround - it will transmit a zero bit (possibly only
; half a bit depending on timing), then go via txnostuffing to txflag
; and transmit a properly-aligned flag (assuming Tx FIFO empty).
; Reason for this is that the opening flag must not occur hard up
; against the trailing flag of the frame just received - BBC won't
; see our flag if so.  The value of the intermediate bit doesn't matter,
; nor does the non-bit-aligned timing of tx enable (BBC does that itself
; when the roles are reversed), it's just to ensure that bit of delay.
; If we are very quick in responding to the Rx flag, then we put out
; a whole bit of zero, if we are late then there may be half a bit
; of undriven line (or even multiple whole bits if we are slow),
; but either way the flag is correctly formed and in a place where
; the BBC can see it.

; For the case of starting transmit of our own packet, software takes
; the idle line interrupt and forces a jump to txflag:.  The PIO
; starts generating the flag, and in the meantime software loads
; packet data into the Tx FIFO so that the PIO finds it after finishing
; the flag and flows on into transmitting the frame data.  The turnaround
; at the end of that scout frame is again done by manuipulating the .wrap
; address, exactly like the other turnarounds.
;
; Actual enable/disable of the Tx line driver is achieved by side-set
; in the Tx and Rx main loops: this gets the Tx turned on when new
; data is driven at the falling edge of the clock, and turned off again
; on return to the Rx main loop.
;
; Worst-case IRQ latency is required to be less than 1 byte-time,
; the critical case being at the end of transmitting scout/ack frames,
; where exactly one flag must be transmitted to avoid collision with
; the remote station turning the line round in response to that flag.
; Next most critical is  from the decision point of the 4th byte
; of an ACK Rx (where the line turnaround on next flag Rx is
; turned on - that flag could be only 3 bytes later for an ACK
; (more for a scout).  Otherwise, 4 byte-times latency is required
; to avoid Rx FIFO overflow or Tx FIFO running dry.
; In some other places latency > 1 byte time will cause extra flags
; to be transmitted - but this is harmless and indeed is what the
; classic Econet machines do.
;
; Rx code uses X as a down-counter for '1' bits to detect
; stuffing/flags/idle.  Y is used temporarily to match values of X.
; Tx code uses Y for the next bit value to output and X as a counter
; for either stuffing bits or the number of bits in a flag.
; Note that the X downcounter values are used for various secondary
; purposes - the marker values in the Rx FIFO and for the code saving
; trick where Y 'happens' to have the right value for IN Y,1 for rx0bit/rx1bit
; This makes it difficult to change the starting value (to give a longer
; idle timeout), but not impossible: the marker values would have to
; be changed in ARM-side code, and the rx0bit/rx1bit can be fixed
; if necessary by doing the tests for flags/stuffing in the opposite order.


; Assumes 1 bit output for TxD (PINCTRL_OUT_BASE=pin/PINCTRL_OUT_COUNT=1)
; Assumes 1 bit of side-set for TxEn with optional side-setting
; (PINCTRL_SIDESET_BASE=pin/PINCTRL_SIDESETCNT=2/EXECCTRL_SIDE_EN=1)
; SET outputs (PINCTRL_SET_BASE) not used: all output via MOV.
; Assumes 1 bit of input (PINCTRL_IN_BASE) for CLK
; (previous version had RxD here too, but now just read RxD with JMP PIN)
; JMP_PIN must be set for RxD (EXECCTRL_JMP_PIN)
; Byte-wide operation, so PULL_THRESH and PUSH_THRESH both =8
; LSB first: OUT_SHIFTDIR/IN_SHIFTDIR both =1
; AUTOPULL/AUTOPUSH both =1

.program econet_hdlc
.side_set 1 opt		; One bit of side-set: the Tx enable pin.
					; Optional so we only specify it when we want to change it
					; - this is important because TxE must be set with
					; precise timing and the code path to that point is
					; often shared with Rx code or tx-next-bit code
					; where TxE could be on or off.

.origin 0
; This is placed at 0000 to allow saving an instruction by having
; a piece of code that wants to jump here run up to the last address
; in the memory and wrap round. So we have Tx code at top and bottom,
; with Rx in the middle.

txmainloop:
  wait 0 pin 0  	; Wait for clock lo, immediately output data
  mov pins, y side 1 [7]; output next bit from y and enable driver if 1st time
					; Delay before waiting clk hi again in case of glitchy edge
  wait 1 pin 0		; Wait for clock hi
  jmp x--, txnostuffing	; jump if stuffing not yet reqd
  			; Next output bit will be a zero to add the stuffing
txreset_x:
  set x, 5			; Reset the counter that's counting '1' bits
PUBLIC tx_zero_bit:	; Fall through for stuffing, enter here from txflag
					; or forced by ARM on line turnaround.
					; Note that in all 3 cases that we get here, the
  set y, 0			; next bit to be output is a zero (either stuffing or user)
    				; and X will be decremented for that bit too, so 5 not 4.
  jmp txmainloop


; Jump here to pick the next bit to transmit into Y
;  - entered with Y=last bit txed, X=0, clock just gone high.
;txnostuffing:
; NB. autopull is enabled, so OSR should never be empty unless the
; FIFO has run dry at end of packet, or at start of packet to cause
; opening flag/flag fill. Flags themselves get loaded into the OSR,
; so if we don't take the jump we are at a byte/flag boundary.


; -------------------------------------------------------


; Here on Rx with a 0 bit that's not a flag - check for stuffing
rx_notflag:
  set y,10
  jmp x!=y rx0bit	; Not stuffing or flag - assume a normal 0 bit. NB Y=10
   ; Here if this was a 0 after 5 1's - don't shift it in, but
   ; fall through to reset the 1's counter and continue

; A little bit of Tx code wedged into the middle of Rx.
; During Rx operations the OSR will always be empty so this does nothing.
; During normal Tx, the wrap is programmed so that it jumps to txflag
; if the branch is not taken - however after the trailing flag of a frame
; the wrap can be removed so that it drops back into Rx.
txnostuffing:
  jmp !OSRE, txnextbit
PUBLIC tx_wrap_source:	; Equivalent to JMP txflag when wrap enabled

PUBLIC rxentrypoint:	; Main entry point at start of time.
  set x,15			; Reset the idle countdown
  jmp rxmainloop


rx0bit:				; Here to shift in a normal '0' bit (Jump here with Y=10)
  set x,15			; Reset the idle countdown and fall through

rx1bit:				; Here to shift in a '1' bit when not yet idle.
					; Jump here with Y=9
  jmp !x, abort_idle	; If about to go idle, jump to send a marker.

  in y, 1			; By cunning contrivance, low bit of Y on arrival here
					; matches the data bit just sampled.
					; (previous version of this code sampled the input GPIO
					; again, risking it having changed meantime).

rxmainloop:
.wrap_target
  wait 0 pin 0 [7]    ; Wait for clock low, delay in case of glitchy edge
  set y,9				; Set Y ready for testing (code save optimisation)
  wait 1 pin 0 side 0	; Wait for clock hi, immediately sample data
						; Side set in case coming from Tx code: might want
						; to move it down 1 instruction (NB. takes effect
						; before any wait cycles)
  jmp pin got_a_1

; Here with a 0 bit received
  jmp x!=y rx_notflag	; If X==9, this is a flag

; Here with a flag received, X==Y==9, and maybe junk in the ISR (max 7 bits).
; We need to clear out the ISR to achieve byte alignment for following
; data, and inform the CPU so it can do end-of-frame processing.
; Original thought here was to use IRQ plus clearing ISR.
; Next idea was MOV ISR,~NULL/PUSH which would push 0xffffffff in the
; FIFO as a marker, leaving ISR clear.
; Final version saves an instruction: it relies on the fact you only get one
; auto-push per instruction, hence shifting in more than 8 bits guarantees a
; push (in this case pushing 0x00000009) and leaves the ISR clear afterwards.

  in y,32

  jmp rxentrypoint		; Jump to get X reset, then loop.


; Come here after decrementing X and it's now zero, Y=9
; Send a marker in the Rx FIFO to show the line is about to go idle.
; Done in this contrived way (do the X--, then test X again) so that
; we only send one marker when the line goes idle rather than clogging
; up the Rx FIFO with repeated markers if it remains idle.
; Ideally we'd use IN Y,32 giving a marker of 9, but that's already used for
; flags. So we do IN Y,31 which gives Y*2 plus the MSB of the existing ISR
; - usually '1' here, but we might possibly have had an autopush on the
; previous bit in which case '0'.
; So the marker value is either 18 or 19 (0x12/0x13).
abort_idle:
  in y,31			

; Would jmp rxmainloop here, but save an instruction by dropping through,
; back to where we were a moment ago.  This is harmless, but means the
; counter decrements twice at the final step  - result is that starting
; from 15 declares idle after 15 1s (normally an X-- loop makes n+1
; iterations starting from n).

; Here with a '1' bit received.
; Currently detects only the 15 1's idle condition - should also detect
; anything more than 6 adjacent 1's as an abort, though an abort followed
; by data (as opposed to going on to idle) is an extremely rare occurrence,
; either just inter-packet junk which will still get ignored or
; perhaps caused by corruption of a 0 bit in the middle of a packet,
; which should get caught by the CRC anyhow.
got_a_1:			; Arrive here with Y=9
  jmp x-- rx1bit	; Jump if not idle -just a normal '1' bit

; Here if idle - received 15 1s.  X=0xffffffff, Y=9.
  set x,0			; Make us keep dropping back in here without filling
					; the fifo with 0xff during a spell of idle.
.wrap

; For normal Rx operation we leave the .wrap setting as default.
; However, if we wish to initiate a new Tx (only allowed when the line is
; idle) we can simply disable the wrap mechanism and it falls through
; from here when the line is idle and starts transmitting flags
; (assuming Tx FIFO is empty - the Tx Flag code posts a marker to the
; Rx FIFO that can be used to trigger loading of the Tx data.

; Re-programming the wrap is also used to manage the exit back from Tx
; to Rx cleanly after the trailing flag.

; Falling through with Y=9, X=0, CLK has just gone high

; Output a flag.
; wrap to here from Tx code to transmit flag fill and opening/closing flags
; (in that case Y=last bit txed, X=0, CLK just gone high
PUBLIC tx_wrap_target:
txflag:
  mov osr,~null		; Load the output register with a byte of 0xff
  out null, 2		; discard two bits of it, leaving six
  set x,6			; set the stuffing counter 1 more than usual, so
					; we get a zero stuffed just after the last of those
					; six 1s

  in x,32			; Write a value in the Rx FIFO so software knows the
					; flag is starting - used to know that Tx has started
					; (and hence load the Tx FIFO) on Tx-from-idle,
					; also to know that the trailing flag has been
					; created due to Tx having gone dry.
					; Use the value that happens to be in X to give a
					; distinct makrer value - 0x00000007, compared to
					; 0x00000009 for flags and 0xNN000000 for normal data.

  jmp tx_zero_bit	; Get the first '0' bit of the flag transmitted,
					; will then loop to txnextbit for the 6  1's in
					; the OSR, and finally the stuffing counter will insert
					; the ending zero.

txnextbit:
  out y, 1		; Else get the next user data bit into y
  jmp !y, txreset_x ; If this is a zero bit, reset the stuffing counter
;  jmp txmainloop	; This instruction not needed as PC wraps round

;Total 32 instructions!!!!  Just fits!!

